apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: ccc-orderer1
  namespace: ccc-net
  annotations:
    fluxcd.io/automated: "false"
spec:
  releaseName: ccc-orderer1
  chart:
    git: https://github.com/liubaninc/bevel.git
    ref: local10
    path: platforms/hyperledger-fabric/charts/orderernode
  values:
    metadata:
      namespace: ccc-net
      images:
        orderer: hyperledger/fabric-orderer:2.2.2
        alpineutils: index.docker.io/hyperledgerlabs/alpine-utils:1.0
    annotations:  
      service:
        - example1: example2
      pvc:
      deployment:
    orderer:
      name: orderer1
      loglevel: info
      localmspid: cccMSP
      tlsstatus: true
      keepaliveserverinterval: 10s
    
    consensus:
      name: kafka

    storage:
      storageclassname: cccsc
      storagesize: 512Mi  

    service:
      servicetype: ClusterIP
      ports:
        grpc:
          clusteripport: 7050

    vault:
      address: http://101.36.106.59:8200
      role: vault-role
      authpath: devccc-net-auth
      secretprefix: secretsv2/data/crypto/ordererOrganizations/ccc-net/orderers/orderer1.ccc-net
      imagesecretname: regcred
      serviceaccountname: vault-auth
    kafka:
      readinesscheckinterval: 10
      readinessthreshold: 10
      brokers:
      - kafka-0.broker.ccc-net.svc.cluster.local:9092
      - kafka-1.broker.ccc-net.svc.cluster.local:9092
      - kafka-2.broker.ccc-net.svc.cluster.local:9092
      - kafka-3.broker.ccc-net.svc.cluster.local:9092

    proxy:
      provider: haproxy
      external_url_suffix: cccambassador.blockchain.liubaninc.cn

    genesis: |-
      CiIaIBdOa+kVD6a7C5bTNxA2k9A0/0PhDkxLYKu8eJXTBk/OEtghCtUhCtIhCngKWggBEAEaBgjo
      9cKPBiIKc3lzY2hhbm5lbCpAOGUyODE1Y2ZkNjkyNjhkODY1YjQ0OTc5ZmJiMTgwZTQxZjcyODA2
      M2JhNTRlZWQ1ODY0ZTZlMDE4YWUzNzVjZRIaEhghfAo8sudc5JZ/b+xLC5Zt4S9yT2OfcJ8S1SAK
      0iASzyAS9RsKB09yZGVyZXIS6RsSvBcKBmNjY01TUBKxFxrdFQoDTVNQEtUVEsoVEscVCgZjY2NN
      U1ASugYtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ05EQ0NBZHFnQXdJQkFnSVVNdkdV
      Z2huMkU2Q21Oa0IveEEvZlF2ZUZub2N3Q2dZSUtvWkl6ajBFQXdJdwplREVMTUFrR0ExVUVCaE1D
      UjBJeER6QU5CZ05WQkFnTUJreHZibVJ2YmpFUE1BMEdBMVVFQnd3R1RHOXVaRzl1Ck1Rd3dDZ1lE
      VlFRS0RBTmpZMk14T1RBM0JnTlZCQU1NTUdOaExtTmpZeTF1WlhRdVkyTmpZVzFpWVhOellXUnYK
      Y2k1aWJHOWphMk5vWVdsdUxteHBkV0poYm1sdVl5NWpiakFlRncweU1qQXhNall3TWpVNE1URmFG
      dzB5TkRFeApNVFV3TWpVNE1URmFNSGd4Q3pBSkJnTlZCQVlUQWtkQ01ROHdEUVlEVlFRSURBWk1i
      MjVrYjI0eER6QU5CZ05WCkJBY01Ca3h2Ym1SdmJqRU1NQW9HQTFVRUNnd0RZMk5qTVRrd053WURW
      UVFERERCallTNWpZMk10Ym1WMExtTmoKWTJGdFltRnpjMkZrYjNJdVlteHZZMnRqYUdGcGJpNXNh
      WFZpWVc1cGJtTXVZMjR3V1RBVEJnY3Foa2pPUFFJQgpCZ2dxaGtqT1BRTUJCd05DQUFST3lRWG85
      c0RUek5mQkRqTE8rQ3d4ZGFtRzNsUEhNdzEzS2JnS1h0Sjc5a2p1Cjh4MVZwbVNEVXY2dDF6UXhX
      VXJBTktSVlU1Wk1GZW8welA1VEJpeVRvMEl3UURBUEJnTlZIUk1CQWY4RUJUQUQKQVFIL01BNEdB
      MVVkRHdFQi93UUVBd0lCcGpBZEJnTlZIUTRFRmdRVTRIb3VUSEErVmJQVWVQS2NlTm5LMm5ERgpr
      MWd3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUlnTkcrSkFLN0wzblkzaHlzTGhEK2UweXBjUm5ET1Zz
      c3Y2SWNzCkVpaWlaYTRDSVFEWndEeURVSVVBNkJaWThWRFdYMUlWSnA5VGpITFNsbE84NGllY2dx
      ckdJUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KIrIILS0tLS1CRUdJTiBDRVJUSUZJQ0FU
      RS0tLS0tCk1JSUM3RENDQXBLZ0F3SUJBZ0lVQllJWDJhN01CRkNGd0N5a0dRelhkbm9OMC9jd0Nn
      WUlLb1pJemowRUF3SXcKZURFTE1Ba0dBMVVFQmhNQ1IwSXhEekFOQmdOVkJBZ01Ca3h2Ym1SdmJq
      RVBNQTBHQTFVRUJ3d0dURzl1Wkc5dQpNUXd3Q2dZRFZRUUtEQU5qWTJNeE9UQTNCZ05WQkFNTU1H
      TmhMbU5qWXkxdVpYUXVZMk5qWVcxaVlYTnpZV1J2CmNpNWliRzlqYTJOb1lXbHVMbXhwZFdKaGJt
      bHVZeTVqYmpBZUZ3MHlNakF4TWpZd016QXhNREJhRncweU16QXgKTWpZd016QTJNREJhTUdReEN6
      QUpCZ05WQkFZVEFrZENNUnN3R1FZRFZRUUhFeEkxTVM0MU1DOHRNQzR4TXk5TQpiMjVrYjI0eEVE
      QU9CZ05WQkFvVEIwOXlaR1Z5WlhJeERqQU1CZ05WQkFzVEJXRmtiV2x1TVJZd0ZBWURWUVFECkRB
      MUJaRzFwYmtCalkyTXRibVYwTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFNmJR
      MXdNV1UKVXpOR3NxQ2I0VjdLSXVhdEVMQkZpOFVidjZQSEFXODBjQVVBczNzQmpySWpXVjEzUzVK
      dVhaN0dzTkRIWTRLTgpHaWdPMXFUblpxVVZkcU9DQVF3d2dnRUlNQTRHQTFVZER3RUIvd1FFQXdJ
      SGdEQU1CZ05WSFJNQkFmOEVBakFBCk1CMEdBMVVkRGdRV0JCUzYvaG1maW9DVk8yaUFvVjlYTW5X
      KzNtbHZLVEFmQmdOVkhTTUVHREFXZ0JUZ2VpNU0KY0Q1VnM5UjQ4cHg0MmNyYWNNV1RXREFrQmdO
      VkhSRUVIVEFiZ2hsallTMTBiMjlzY3kwMk5qWmpOamxqT1dRMwpMVzVzZDNoMk1JR0JCZ2dxQXdR
      RkJnY0lBUVIxZXlKaGRIUnljeUk2ZXlKaFltRmpMbWx1YVhRaU9pSjBjblZsCklpd2lZV1J0YVc0
      aU9pSjBjblZsSWl3aWFHWXVRV1ptYVd4cFlYUnBiMjRpT2lJaUxDSm9aaTVGYm5KdmJHeHQKWlc1
      MFNVUWlPaUpCWkcxcGJrQmpZMk10Ym1WMElpd2lhR1l1Vkhsd1pTSTZJbUZrYldsdUluMTlNQW9H
      Q0NxRwpTTTQ5QkFNQ0EwZ0FNRVVDSVFDUWtoZzhkd1lpS1NIQUJhOE5uTUc0WGxza2RsUER6ZnRl
      RjNza1h6MWhyQUlnClVYWU94UjFhaldtM2hTeHVjcWVaaFRtcU8wekZ1SHB6SWhiZnVHM1psMVE9
      Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KQg4KBFNIQTISBlNIQTI1Nkq6Bi0tLS0tQkVHSU4g
      Q0VSVElGSUNBVEUtLS0tLQpNSUlDTkRDQ0FkcWdBd0lCQWdJVU12R1VnaG4yRTZDbU5rQi94QS9m
      UXZlRm5vY3dDZ1lJS29aSXpqMEVBd0l3CmVERUxNQWtHQTFVRUJoTUNSMEl4RHpBTkJnTlZCQWdN
      Qmt4dmJtUnZiakVQTUEwR0ExVUVCd3dHVEc5dVpHOXUKTVF3d0NnWURWUVFLREFOalkyTXhPVEEz
      QmdOVkJBTU1NR05oTG1Oall5MXVaWFF1WTJOallXMWlZWE56WVdSdgpjaTVpYkc5amEyTm9ZV2x1
      TG14cGRXSmhibWx1WXk1amJqQWVGdzB5TWpBeE1qWXdNalU0TVRGYUZ3MHlOREV4Ck1UVXdNalU0
      TVRGYU1IZ3hDekFKQmdOVkJBWVRBa2RDTVE4d0RRWURWUVFJREFaTWIyNWtiMjR4RHpBTkJnTlYK
      QkFjTUJreHZibVJ2YmpFTU1Bb0dBMVVFQ2d3RFkyTmpNVGt3TndZRFZRUUREREJqWVM1alkyTXRi
      bVYwTG1OagpZMkZ0WW1GemMyRmtiM0l1WW14dlkydGphR0ZwYmk1c2FYVmlZVzVwYm1NdVkyNHdX
      VEFUQmdjcWhrak9QUUlCCkJnZ3Foa2pPUFFNQkJ3TkNBQVJPeVFYbzlzRFR6TmZCRGpMTytDd3hk
      YW1HM2xQSE13MTNLYmdLWHRKNzlranUKOHgxVnBtU0RVdjZ0MXpReFdVckFOS1JWVTVaTUZlbzB6
      UDVUQml5VG8wSXdRREFQQmdOVkhSTUJBZjhFQlRBRApBUUgvTUE0R0ExVWREd0VCL3dRRUF3SUJw
      akFkQmdOVkhRNEVGZ1FVNEhvdVRIQStWYlBVZVBLY2VObksybkRGCmsxZ3dDZ1lJS29aSXpqMEVB
      d0lEU0FBd1JRSWdORytKQUs3TDNuWTNoeXNMaEQrZTB5cGNSbkRPVnNzdjZJY3MKRWlpaVphNENJ
      UURad0R5RFVJVUE2QlpZOFZEV1gxSVZKcDlUakhMU2xsTzg0aWVjZ3FyR0lRPT0KLS0tLS1FTkQg
      Q0VSVElGSUNBVEUtLS0tLQoaBkFkbWlucyIvCgdXcml0ZXJzEiQSGggBEhYSCBIGCAESAggAGgoS
      CAoGY2NjTVNQGgZBZG1pbnMiMAoGQWRtaW5zEiYSHAgBEhgSCBIGCAESAggAGgwSCgoGY2NjTVNQ
      EAEaBkFkbWlucyIzCgtFbmRvcnNlbWVudBIkEhoIARIWEggSBggBEgIIABoKEggKBmNjY01TUBoG
      QWRtaW5zIi8KB1JlYWRlcnMSJBIaCAESFhIIEgYIARICCAAaChIICgZjY2NNU1AaBkFkbWlucyoG
      QWRtaW5zGiIKCUJhdGNoU2l6ZRIVEgsIChCAgIAxGICAQBoGQWRtaW5zGh4KDEJhdGNoVGltZW91
      dBIOEgQKAjJzGgZBZG1pbnMaHwoTQ2hhbm5lbFJlc3RyaWN0aW9ucxIIGgZBZG1pbnMaJAoMQ2Fw
      YWJpbGl0aWVzEhQSCgoICgRWMl8wEgAaBkFkbWlucxrYAQoMS2Fma2FCcm9rZXJzEscBErwBCi1r
      YWZrYS0wLmJyb2tlci5jY2MtbmV0LnN2Yy5jbHVzdGVyLmxvY2FsOjkwOTIKLWthZmthLTEuYnJv
      a2VyLmNjYy1uZXQuc3ZjLmNsdXN0ZXIubG9jYWw6OTA5Mgota2Fma2EtMi5icm9rZXIuY2NjLW5l
      dC5zdmMuY2x1c3Rlci5sb2NhbDo5MDkyCi1rYWZrYS0zLmJyb2tlci5jY2MtbmV0LnN2Yy5jbHVz
      dGVyLmxvY2FsOjkwOTIaBkFkbWlucxoiCg1Db25zZW5zdXNUeXBlEhESBwoFa2Fma2EaBkFkbWlu
      cyIiCgdSZWFkZXJzEhcSDQgDEgkKB1JlYWRlcnMaBkFkbWlucyIiCgdXcml0ZXJzEhcSDQgDEgkK
      B1dyaXRlcnMaBkFkbWlucyIiCgZBZG1pbnMSGBIOCAMSCgoGQWRtaW5zEAIaBkFkbWlucyIqCg9C
      bG9ja1ZhbGlkYXRpb24SFxINCAMSCQoHV3JpdGVycxoGQWRtaW5zKgZBZG1pbnMSxgEKC0NvbnNv
      cnRpdW1zErYBEmwKDWNjY0NvbnNvcnRpdW0SWxpAChVDaGFubmVsQ3JlYXRpb25Qb2xpY3kSJxIM
      CAMSCAoGQWRtaW5zGhcvQ2hhbm5lbC9PcmRlcmVyL0FkbWlucyoXL0NoYW5uZWwvT3JkZXJlci9B
      ZG1pbnMiLQoGQWRtaW5zEiMSCAgBEgQSAhIAGhcvQ2hhbm5lbC9PcmRlcmVyL0FkbWlucyoXL0No
      YW5uZWwvT3JkZXJlci9BZG1pbnMaJgoQSGFzaGluZ0FsZ29yaXRobRISEggKBlNIQTI1NhoGQWRt
      aW5zGi0KGUJsb2NrRGF0YUhhc2hpbmdTdHJ1Y3R1cmUSEBIGCP////8PGgZBZG1pbnMamgEKEE9y
      ZGVyZXJBZGRyZXNzZXMShQESagozb3JkZXJlcjAuY2NjYW1iYXNzYWRvci5ibG9ja2NoYWluLmxp
      dWJhbmluYy5jbjo4NDQzCjNvcmRlcmVyMS5jY2NhbWJhc3NhZG9yLmJsb2NrY2hhaW4ubGl1YmFu
      aW5jLmNuOjg0NDMaFy9DaGFubmVsL09yZGVyZXIvQWRtaW5zGiQKDENhcGFiaWxpdGllcxIUEgoK
      CAoEVjJfMBIAGgZBZG1pbnMiIgoGQWRtaW5zEhgSDggDEgoKBkFkbWlucxACGgZBZG1pbnMiIgoH
      UmVhZGVycxIXEg0IAxIJCgdSZWFkZXJzGgZBZG1pbnMiIgoHV3JpdGVycxIXEg0IAxIJCgdXcml0
      ZXJzGgZBZG1pbnMqBkFkbWlucxoOCgQKAgoACgAKAAoACgA=
